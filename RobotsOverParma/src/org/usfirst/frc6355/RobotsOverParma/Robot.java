// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc6355.RobotsOverParma;

import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.CommandGroup;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.networktables.NetworkTable;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.cscore.UsbCamera;

import org.usfirst.frc6355.RobotsOverParma.commands.*;
import org.usfirst.frc6355.RobotsOverParma.subsystems.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

	SendableChooser<Command> autonomousChooser;
	Command autonomousCommand;
	
	public static OI oi;
	public static DriveTrain driveTrain;
	public static Shooter shooter;
	public static RopeClimber ropeClimber;
	public static Intake intake;
	public static Vision vision;

	/**
	 * This function is run when the robot is first started up and should be
	 * used for any initialization code.
	 */
	public void robotInit() {
		RobotMap.init();
		System.out.println("Robot Init");
		driveTrain = new DriveTrain();
		shooter = new Shooter();
		ropeClimber = new RopeClimber();
		intake = new Intake();
		vision = new Vision();
		
		driveTrain.resetDistanceMeasures(); // Reset encoders to 0.

		// OI must be constructed after subsystems. If the OI creates Commands
		// (which it very likely will), subsystems are not guaranteed to be
		// constructed yet. Thus, their requires() statements may grab null
		// pointers. Bad news. Don't move it.
		oi = new OI();

		// instantiate the commands used for the autonomous period
		Command autonomousDoNothing = new CommandGroup("Do Nothing");
		Command autonomousCommandFromLeft = new AutonomousPegFromLeftCommand();
		Command autonomousCommandFromCenter = new AutonomousPegFromCenterCommand();
		Command autonomousCommandFromRight = new AutonomousPegFromRightCommand();
		Command autonomousCommandTurnInPlace = new AutonomousTurnInPlaceCommand(90.0);
		autonomousChooser = new SendableChooser<Command>();
		autonomousChooser.addDefault("Nothing", autonomousDoNothing);
		autonomousChooser.addObject("From Left", autonomousCommandFromLeft);
		autonomousChooser.addObject("From Center", autonomousCommandFromCenter);
		autonomousChooser.addObject("From Right", autonomousCommandFromRight);
		autonomousChooser.addObject("Turn in Place", autonomousCommandTurnInPlace);

		// Start camera feeds.
		try {
			UsbCamera camera = CameraServer.getInstance().startAutomaticCapture();
			camera.setResolution(640, 480);
		} catch (Exception ex) {
			DriverStation.reportError(ex.getMessage(), true);
		}
	}

	/**
	 * This function is called when the disabled button is hit. You can use it
	 * to reset subsystems before shutting down.
	 */
	public void disabledInit() {

	}

	public void disabledPeriodic() {
		Scheduler.getInstance().run();
	}

	public void autonomousInit() {
		driveTrain.resetDistanceMeasures(); // Reset encoders to 0.
		
		// schedule the autonomous command (example)
		// RobotMap.ahrs.reset();

		if (autonomousCommand != null)
			autonomousCommand.cancel();
		
		// Get the command that's selected in the chooser.
		autonomousCommand = autonomousChooser.getSelected();
		if (autonomousCommand != null)
			autonomousCommand.start();
	}

	/**
	 * This function is called periodically during autonomous
	 */
	public void autonomousPeriodic() {
		Scheduler.getInstance().run();
	}

	public void teleopInit() {
		RobotMap.ahrs.reset();
		driveTrain.resetDistanceMeasures(); // Reset encoders to 0.

		// This makes sure that the autonomous stops running when
		// teleop starts running. If you want the autonomous to
		// continue until interrupted by another command, remove
		// this line or comment it out.
		if (autonomousCommand != null) {
			autonomousCommand.cancel();
			autonomousCommand = null;
		}
	}

	/**
	 * This function is called periodically during operator control
	 */
	public void teleopPeriodic() {
		Scheduler.getInstance().run();
	}

	/**
	 * This function is called periodically during test mode
	 */
	public void testPeriodic() {
		LiveWindow.run();
	}
}
